apply plugin: "signing"
apply plugin: "maven-publish"

def isReleaseBuild() {
    return !getPublishVersion().contains("SNAPSHOT")
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

afterEvaluate {
    // See https://developer.android.com/studio/build/maven-publish-plugin
    // and https://docs.gradle.org/current/userguide/publishing_maven.html

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = GROUP
                artifactId = POM_ARTIFACT_ID
                version = getPublishVersion
                from components.java
                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = POM_NAME
                    description = POM_DESCRIPTION
                    url = POM_URL
                    packaging = POM_PACKAGING
                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                            distribution = POM_LICENCE_DIST
                        }
                    }
                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                        }
                    }
                    organization {
                        name = POM_DEVELOPER_NAME
                        url = POM_ORGANIZATION_URL
                    }
                    scm {
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                        url = POM_SCM_URL
                    }
                }
            }
        }

        repositories {
            maven {
                def releasesRepoUrl = getReleaseRepositoryUrl()
                def snapshotsRepoUrl = getSnapshotRepositoryUrl()
                url = isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl
                url url
                credentials {
                    username getRepositoryUsername()
                    password getRepositoryPassword()
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = getRepositoryStagingId()
            username = getRepositoryUsername()
            password = getRepositoryPassword()
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

signing {
    sign publishing.publications
}

ext["signing.keyId"] = System.getenv("SIGNING_KEY_ID")
ext["signing.password"] = System.getenv("SIGNING_PASSWORD")

// If the key content is in an environmental var, write it to "tmp/key.gpg" and update
// ext['signing.secretKeyRingFile'] to point to it
def keyContent = System.getenv("SIGNING_KEY")
if (keyContent != null) {
    def tempDirectory = new File("$rootProject.rootDir/tmp")
    mkdir tempDirectory
    def keyFile = new File("$tempDirectory/key.gpg")
    keyFile.createNewFile()
    def os = keyFile.newDataOutputStream()
    os.write(keyContent.decodeBase64())
    os.close()
    keyContent = ''

    ext['signing.secretKeyRingFile'] = keyFile.absolutePath
}


